"" Source your .vimrc
"source ~/.vimrc

" plugins
set sneak
set which-key

" for which-key to display popup
set notimeout
let g:WhichKey_ShowVimActions = "true"

"" -- Suggested options --
" Show a few lines of context around the cursor. Note that this makes the
" text scroll if you mouse-click near the start or end of the window.
set scrolloff=5
set nu rnu

" Do incremental searching.
set incsearch

" Don't use Ex mode, use Q for formatting.
map Q gq

let mapleader = " "
map gh 0
map gl $
map ge G
map gs ^

map gr <Action>(GotoDeclaration)
map gd <Action>(GotoDeclaration)
map gy <Action>(GotoTypeDeclaration)
map gi <Action>(GotoImplementation)

map <leader>a <Action>(ShowIntentionActions)
let g:WhichKeyDesc_intentions        = "<leader>a Show actions"
map <leader>f <Action>(GotoFile)
map <leader>s <Action>(FileStructurePopup)
map <leader>S <Action>(GotoSymbol)
map <leader>k <Action>(QuickJavaDoc)
map <leader>/ <Action>(FindInPath)
map <leader>? <Action>(GotoAction)

" Refactor actions
let g:WhichKeyDesc_refactor        = "<leader>r  Refactor"
map <leader>rr <Action>(RenameElement)
let g:WhichKeyDesc_refactor_rename = "<leader>rr rename"
map <leader>rm <Action>(ExtractMethod)
let g:WhichKeyDesc_refactor_method  = "<leader>rm extract method"
map <leader>rv <Action>(IntroduceVariable)
let g:WhichKeyDesc_refactor_variable  = "<leader>rv extract variable"
map <leader>rc <Action>(IntroduceConstant)
let g:WhichKeyDesc_refactor_constant  = "<leader>rc extract constant"
map <leader>rf <Action>(IntroduceField)
let g:WhichKeyDesc_refactor_field  = "<leader>rf extract field"
map <leader>rp <Action>(IntroduceParameter)
let g:WhichKeyDesc_refactor_parameter  = "<leader>rp extract parameter"
map <leader>ri <Action>(Inline)
let g:WhichKeyDesc_refactor_inline  = "<leader>ri inline"
map <leader>ro <Action>(IntroduceParameterObject)
let g:WhichKeyDesc_refactor_param_object  = "<leader>ro extract parameter object"
map <leader>rq <Action>(Refactorings.QuickListPopupAction)
let g:WhichKeyDesc_refactor_quick_popup  = "<leader>rq show refactor popup"

"" -- Map IDE actions to IdeaVim -- https://jb.gg/abva4t
"" Map \r to the Reformat Code action
"map  <Action>(ReformatCode)

"" Map <leader>d to start debug
"map <leader>d <Action>(Debug)

"" Map \b to toggle the breakpoint on the current line
"map \b <Action>(ToggleLineBreakpoint)


" Find more examples here: https://jb.gg/share-ideavimrc

"" Source your .vimrc
"source ~/.vimrc

let mapleader = " "
" plugins
set which-key
set surround
set NERDTree
set commentary
set argtextobj
set highlightedyank
set ReplaceWithRegister
set exchange
set ideajoin
set multicursor
set quickscope
set easymotion

"set multiple-cursors  this is not working as plugin describes, replaced with intellij mappings

" removing mappings
nunmap gr
nunmap grr

"""""""""""""""""""""""" SETTINGS """""""""""""""""""""""""""""
" System clipboard fix
set clipboard+=unnamed

" Turning off error bells
set noerrorbells
set visualbell
" for which-key to display popup
set notimeout
let g:WhichKey_ShowVimActions = "false"

" settings for highlightedyank
let g:highlightedyank_highlight_duration = "1000"
let g:highlightedyank_highlight_color = "rgba(160, 160, 160, 155)"

" Note that this makes the
" text scroll if you mouse-click near the start or end of the window.
set iskeyword+=-
set tabstop = 4
set softtabstop = 4
set scrolloff=8
set nu rnu
" Do incremental searching.
set incsearch

" Don't use Ex mode, use Q for formatting.
map Q gq

"""""""""""""""""""""""" MOVEMENTS """""""""""""""""""""""""""""
map <A-j> <Action>(MoveStatementDown)
map <A-k> <Action>(MoveStatementUp)
map <S-L> <Action>(NextTab)
map <S-H> <Action>(PreviousTab)
nmap <C-i> <Action>(Forward)
nmap <C-o> <Action>(Back)

"""""""""""""""""""""""" LEADER MAPPINGS """""""""""""""""""""""""""""
map <leader>a <Action>(ShowIntentionActions)
let g:WhichKeyDesc_actions        = "<leader>a Show actions"
map <leader>ff <Action>(GotoFile)
map <leader>fc <Action>(GotoClass)
map <leader>fb <Action>(RecentFiles)
map <leader>fs <Action>(FindInPath)
map <leader>f<S-s> <Action>(GotoSymbol)
map K <Action>(QuickJavaDoc)
map <leader>f? <Action>(GotoAction)
map <leader>s <Action>(FileStructurePopup)
map <leader>q <Action>(Exit)
map <leader>/ <Action>(CommentByLineComment)
let g:WhichKeyDesc_project        = "<leader>p Project"
map <leader>pe :NERDTreeToggle<CR>
map <leader>po :NERDTreeFind<CR>
map <leader>pr <Action>(ManageRecentProjects)

"""""""""""""""""""""""" LSP MAPPINGS """""""""""""""""""""""""""""
let g:WhichKeyDesc_lsp        = "<leader>l LSP"
map <leader>lf <Action>(ReformatCode)
map <leader>lo <Action>(OptimizeImports)
map <leader>lg <Action>(Generate)

"""""""""""""""""""""""" REFACTOR MAPPINGS """""""""""""""""""""""""""""
map <leader>rr <Action>(RenameElement)
let g:WhichKeyDesc_refactor        = "<leader>r Refactor"
let g:WhichKeyDesc_refactor_rename = "<leader>rr rename"
map <leader>rm <Action>(ExtractMethod)
let g:WhichKeyDesc_refactor_method  = "<leader>rm extract method"
map <leader>rv <Action>(IntroduceVariable)
let g:WhichKeyDesc_refactor_variable  = "<leader>rv extract variable"
map <leader>rc <Action>(IntroduceConstant)
let g:WhichKeyDesc_refactor_constant  = "<leader>rc extract constant"
map <leader>rf <Action>(IntroduceField)
let g:WhichKeyDesc_refactor_field  = "<leader>rf extract field"
map <leader>rp <Action>(IntroduceParameter)
let g:WhichKeyDesc_refactor_parameter  = "<leader>rp extract parameter"
map <leader>ri <Action>(Inline)
let g:WhichKeyDesc_refactor_inline  = "<leader>ri inline"
map <leader>ro <Action>(IntroduceParameterObject)
let g:WhichKeyDesc_refactor_param_object  = "<leader>ro extract parameter object"
map <leader>rq <Action>(Refactorings.QuickListPopupAction)
let g:WhichKeyDesc_refactor_quick_popup  = "<leader>rq show refactor popup"
map <leader>rs <Action>(SurroundWith)
let g:WhichKeyDesc_surround_with  = "<leader>rs surround with"
map <leader>ru <Action>(Unwrap)
let g:WhichKeyDesc_unwrap  = "<leader>rs unwrap"

"""""""""""""""""""""""" GIT MAPPINGS """""""""""""""""""""""""""""
let g:WhichKeyDesc_git        = "<leader>g  Git"
map <leader>gu <Action>(Vcs.UpdateProject)
map <leader>gp <Action>(Vcs.Push)
map <leader>gh <Action>(Vcs.ShowTabbedFileHistory)
map <leader>gc <Action>(CheckinProject)
map <leader>gf <Action>(Git.Fetch)
map <leader>gn <Action>(Git.CreateNewBranch)
map <leader>gl <Action>(Git.Branches)
map <leader>gm <Action>(Git.Merge)
map <leader>g= <Action>(Git.CompareWithBranch)
map <leader>gr <Action>(ChangesView.Revert)

"""""""""""""""""""""""" GOTO MAPPINGS """""""""""""""""""""""""""""
nmap gd <Action>(GotoDeclaration)
nmap gr <Action>(GotoDeclaration)
nmap gy <Action>(GotoTypeDeclaration)
nmap gi <Action>(GotoImplementation)
nmap gt <Action>(GotoTest)
nmap g; <Action>(JumpToLastChange)
nmap g, <Action>(JumpToNextChange)

"""""""""""""""""""""""" UNIMPARIED MAPPINGS """""""""""""""""""""""""""""
nmap ]f <Action>(MethodDown)
map [f <Action>(MethodUp)
map ]d <Action>(GotoNextError)
map [d <Action>(GotoPreviousError)
nnoremap ]<space> mpo<Esc>`p
nnoremap [<space> mpO<Esc>`p

"""""""""""""""""""""""" MULTIPLE CURSOR MAPPINGS """""""""""""""""""""""""""""
map <c-n> <Action>(SelectNextOccurrence)
" intellij nie ma takiej akcji!
"map <c-s-N> <Action>(SelectPreviousOccurrence)
map <a-n> <Action>(EditorCloneCaretBelow)
map <a-s-N> <Action>(EditorCloneCaretAbove)
map <c-s-a-n> <Action>(SelectAllOccurrences)

"""""""""""""""""""""""" EASY MOTION MAPPINGS """""""""""""""""""""""""""""
map s <Plug>(easymotion-s)
map <leader>w <Plug>(easymotion-bd-w)
map <leader>e <Plug>(easymotion-bd-e)

"""""""""""""""""""""""" ReplaceWithRegister """""""""""""""""""""""""""""
nmap cr <Plug>ReplaceWithRegisterOperator
nmap crr <Plug>ReplaceWithRegisterLine
xmap cr <Plug>ReplaceWithRegisterVisual


"""""""""""""""""""""""" Other """""""""""""""""""""""""""""
nmap <C-\> <Action>(ActivateTerminalToolWindow)

"" -- Map IDE actions to IdeaVim -- https://jb.gg/abva4t
"" Map \r to the Reformat Code action
"map  <Action>(ReformatCode)

"" Map <leader>d to start debug
"map <leader>d <Action>(Debug)

"" Map \b to toggle the breakpoint on the current line
"map \b <Action>(ToggleLineBreakpoint)

" In insert or command mode, move by using Ctrl

"""""""""""""""""""""""" INSERT MODE MAPPINGS """""""""""""""""""""""""""""
inoremap <C-h> <Left>
inoremap <C-j> <Down>
inoremap <C-k> <Up>
inoremap <C-l> <Right>
cnoremap <C-h> <Left>
cnoremap <C-j> <Down>
cnoremap <C-k> <Up>
cnoremap <C-l> <Right>

"""""""""""""""""""""""" CUSTOM FUNCTIONS MAPPINGS """""""""""""""""""""""""""""
" Stolen from https://github.com/citizenmatt/dotfiles/blob/master/ideavimrc
function! Invert(calledFromVisual)
  let antonyms = ['true', 'false', 'after', 'before', 'start', 'end', 'left', 'right', 'first', 'last',
                 \'True', 'False', 'After', 'Before', 'Start', 'End', 'Left', 'Right', 'First', 'Last']

  if a:calledFromVisual
    normal gv"wy
  else
    normal "wyiw
  endif
  let wordUnderCaret = @w

  let eraseWord = a:calledFromVisual ? 'gvc' : 'ciw'
  let count = 0
  while (count < len(antonyms))
    if (antonyms[count] ==# wordUnderCaret)
      let antonym = (count % 2 ==? 0) ? antonyms[count + 1] : antonyms[count - 1]
      execute 'normal ' .. eraseWord .. antonym
      break
    endif
    let count += 1
  endwhile
endfunction
nnoremap ! :call Invert(0)<CR>
vnoremap ! :<C-u>call Invert(1)<CR>

" Find more examples here: https://jb.gg/share-ideavimrc
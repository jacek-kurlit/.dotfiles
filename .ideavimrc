"" Source your .vimrc
"source ~/.vimrc

let mapleader = " "
" plugins
set which-key
set NERDTree
set commentary
set argtextobj
set highlightedyank
set ReplaceWithRegister
set sneak
set surround
set exchange
set ideajoin
set quickscope
" set easymotion sneak is less overwhelming in case of cognitive overload
set multiple-cursors
set textobj-entire
set matchit
" removing mappings
nunmap gr
nunmap grr

"""""""""""""""""""""""" SETTINGS """""""""""""""""""""""""""""
" System clipboard fix

" set clipboard^=unnamedplus,unnamed

" Turning off error bells
set noerrorbells
set visualbell
" for which-key to display popup
set notimeout
let g:WhichKey_ShowVimActions = "false"

" settings for quick-scope
let g:qs_highlight_on_keys = ['f', 'F', 't', 'T']

" settings for highlightedyank
let g:highlightedyank_highlight_duration = "1000"
let g:highlightedyank_highlight_color = "rgba(160, 160, 160, 155)"

" settings for argtextobject
let g:argtextobj_pairs="(:),{:},<:>,[:]"

" Note that this makes the
" text scroll if you mouse-click near the start or end of the window.
set iskeyword+=-
set tabstop = 4
set softtabstop = 4
set scrolloff=8
set nu rnu
" Do incremental searching.
set incsearch
set ignorecase
set smartcase

" Don't use Ex mode, use Q for formatting.
map Q gq

nmap <C-\> <Action>(ActivateTerminalToolWindow)

"""""""""""""""""""""""" MOVEMENTS """""""""""""""""""""""""""""
map <A-j> <Action>(MoveStatementDown)
map <A-k> <Action>(MoveStatementUp)
map <S-L> <Action>(NextTab)
map <S-H> <Action>(PreviousTab)
nmap <C-i> <Action>(Forward)
nmap <C-o> <Action>(Back)
nmap <C-h> :NERDTreeFocus<CR>

"""""""""""""""""""""""" LEADER MAPPINGS """""""""""""""""""""""""""""
map <leader>a <Action>(ShowIntentionActions)
let g:WhichKeyDesc_actions        = "<leader>a Show actions"
map <leader>ff <Action>(GotoFile)
map <leader>fc <Action>(GotoClass)
map <leader>fb <Action>(RecentFiles)
map <leader>fs <Action>(FindInPath)
map <leader>f<S-s> <Action>(GotoSymbol)
map K <Action>(QuickJavaDoc)
map <c-s>I <Action>(QuickImplementations)
map <leader>f? <Action>(GotoAction)
map <leader>s <Action>(FileStructurePopup)
map <leader>q <Action>(Exit)
map <leader>e :NERDTreeToggle<CR>
let g:WhichKeyDesc_explorer  = "<leader>p open explorer"
map <leader>o :NERDTreeFind<CR>
let g:WhichKeyDesc_focus_in_explorer  = "<leader>o focus in explorer"
map <leader>/ <Action>(CommentByLineComment)

"""""""""""""""""""""""" PROJECT MAPPINGS """""""""""""""""""""""""""""
let g:WhichKeyDesc_project        = "<leader>p Project"
map <leader>pl <Action>(ManageRecentProjects)
let g:WhichKeyDesc_recent_projects_list  = "<leader>pl recent projects"
map <leader>pm <Action>(Maven.ExecuteGoal)
let g:WhichKeyDesc_project_execute_maven  = "<leader>pm execute maven goal"
map <leader>pr <Action>(ExternalSystem.ProjectRefreshAction)
let g:WhichKeyDesc_project_refresh  = "<leader>pr refresh project"

"""""""""""""""""""""""" CODE MAPPINGS """""""""""""""""""""""""""""
let g:WhichKeyDesc_code        = "<leader>c Code"
map <leader>cf <Action>(ReformatCode)
map <leader>co <Action>(OptimizeImports)
map <leader>cg <Action>(Generate)
map <leader>cm <Action>(OverrideMethods)

"""""""""""""""""""""""" DEBUG MAPPINGS """""""""""""""""""""""""""""
let g:WhichKeyDesc_debug        = "<leader>d Debug"
map <leader>dt <Action>(ToggleLineBreakpoint)
let g:WhichKeyDesc_toggle_breakpoint  = "<leader>dt toggle breakpoint"
map <leader>dv <Action>(StepOver)
let g:WhichKeyDesc_step_over  = "<leader>dv step over"
map <leader>di <Action>(StepInto)
let g:WhichKeyDesc_step_into  = "<leader>di step into"
map <leader>du <Action>(StepOut)
let g:WhichKeyDesc_step_out  = "<leader>du step out"
map <leader>de <Action>(EvaluateExpression)
let g:WhichKeyDesc_evaluate_expression  = "<leader>de evaluate expression"
map <leader>dr <Action>(Resume)
let g:WhichKeyDesc_resume  = "<leader>dr resume execution"

"""""""""""""""""""""""" TEST MAPPINGS """""""""""""""""""""""""""""
let g:WhichKeyDesc_test        = "<leader>t Test"
map <leader>tc <Action>(RunClass)
let g:WhichKeyDesc_run_current_test  = "<leader>tc run current test"
map <leader>tr <Action>(RerunTests)
let g:WhichKeyDesc_rerun_test  = "<leader>tr rerun tests"
map <leader>tf <Action>(RerunFailedTests)
let g:WhichKeyDesc_rerun_failed_test  = "<leader>tf rerun failed tests"
map <leader>td <Action>(DebugClass)
let g:WhichKeyDesc_debug_current_test  = "<leader>td debug current test"

"""""""""""""""""""""""" TEST MAPPINGS """""""""""""""""""""""""""""
let g:WhichKeyDesc_test        = "<leader>t Test"
map <leader>tc <Action>(RunClass)
let g:WhichKeyDesc_run_current_test  = "<leader>tc run current test"
map <leader>tr <Action>(Run)
let g:WhichKeyDesc_last_test  = "<leader>tl rerun last test"
map <leader>td <Action>(DebugClass)
let g:WhichKeyDesc_debug_current_test  = "<leader>td debug current test"

"""""""""""""""""""""""" REFACTOR MAPPINGS """""""""""""""""""""""""""""
map <leader>rr <Action>(RenameElement)
let g:WhichKeyDesc_refactor        = "<leader>r Refactor"
let g:WhichKeyDesc_refactor_rename = "<leader>rr rename"
map <leader>rm <Action>(ExtractMethod)
let g:WhichKeyDesc_refactor_method  = "<leader>rm extract method"
map <leader>rv <Action>(IntroduceVariable)
let g:WhichKeyDesc_refactor_variable  = "<leader>rv extract variable"
map <leader>rc <Action>(IntroduceConstant)
let g:WhichKeyDesc_refactor_constant  = "<leader>rc extract constant"
map <leader>rf <Action>(IntroduceField)
let g:WhichKeyDesc_refactor_field  = "<leader>rf extract field"
map <leader>rp <Action>(IntroduceParameter)
let g:WhichKeyDesc_refactor_parameter  = "<leader>rp extract parameter"
map <leader>ri <Action>(Inline)
let g:WhichKeyDesc_refactor_inline  = "<leader>ri inline"
map <leader>ro <Action>(IntroduceParameterObject)
let g:WhichKeyDesc_refactor_param_object  = "<leader>ro extract parameter object"
map <leader>rq <Action>(Refactorings.QuickListPopupAction)
let g:WhichKeyDesc_refactor_quick_popup  = "<leader>rq show refactor popup"
map <leader>rs <Action>(SurroundWith)
let g:WhichKeyDesc_surround_with  = "<leader>rs surround with"
map <leader>ru <Action>(Unwrap)
let g:WhichKeyDesc_unwrap  = "<leader>ru unwrap"
map <leader>rt <Action>(Move)
let g:WhichKeyDesc_transport_object  = "<leader>rt transport"

"""""""""""""""""""""""" GIT MAPPINGS """""""""""""""""""""""""""""
let g:WhichKeyDesc_git        = "<leader>g  Git"
map <leader>gu <Action>(Vcs.UpdateProject)
map <leader>gp <Action>(Vcs.Push)
map <leader>gh <Action>(Vcs.ShowTabbedFileHistory)
map <leader>gc <Action>(CheckinProject)
map <leader>gf <Action>(Git.Fetch)
map <leader>gn <Action>(Git.CreateNewBranch)
map <leader>gl <Action>(Git.Branches)
map <leader>gm <Action>(Git.Merge)
map <leader>g= <Action>(Git.CompareWithBranch)
map <leader>gr <Action>(ChangesView.Revert)

"""""""""""""""""""""""" GOTO MAPPINGS """""""""""""""""""""""""""""
nmap gd <Action>(GotoDeclaration)
nmap gr <Action>(GotoDeclaration)
nmap gy <Action>(GotoTypeDeclaration)
nmap gi <Action>(GotoImplementation)
nmap gt <Action>(GotoTest)
nmap gs <Action>(ParameterInfo)
nmap gl <Action>(ShowErrorDescription)
nmap g; <Action>(JumpToLastChange)
nmap g, <Action>(JumpToNextChange)

"""""""""""""""""""""""" UNIMPARIED MAPPINGS """""""""""""""""""""""""""""
nmap ]f <Action>(MethodDown)
map [f <Action>(MethodUp)
map ]d <Action>(GotoNextError)
map [d <Action>(GotoPreviousError)
map ]g <Action>(VcsShowNextChangeMarker)
map [g <Action>(VcsShowPrevChangeMarker)
nnoremap ]<space> mpo<Esc>`p
nnoremap [<space> mpO<Esc>`p

"""""""""""""""""""""""" MULTIPLE CURSOR MAPPINGS """""""""""""""""""""""""""""
" Remap multiple-cursors shortcuts to match terryma/vim-multiple-cursors
nmap <C-n> <Plug>NextWholeOccurrence
xmap <C-n> <Plug>NextWholeOccurrence
nmap g<C-n> <Plug>NextOccurrence
xmap g<C-n> <Plug>NextOccurrence
nmap <C-x> <Plug>SkipOccurrence
xmap <C-x> <Plug>SkipOccurrence
nmap <C-p> <Plug>RemoveOccurrence
xmap <C-p> <Plug>RemoveOccurrence

" Note that the default <A-n> and g<A-n> shortcuts don't work on Mac due to dead keys.
" <A-n> is used to enter accented text e.g. Ã±
nmap <S-A-C-n> <Plug>AllWholeOccurrences
xmap <S-A-C-n> <Plug>AllWholeOccurrences
nmap g<S-C-n> <Plug>AllOccurrences
xmap g<S-C-n> <Plug>AllOccurrences
"map <c-n> <Action>(SelectNextOccurrence)
" intellij nie ma takiej akcji!
"map <c-s-N> <Action>(SelectPreviousOccurrence)
map <a-n> <Action>(EditorCloneCaretBelow)
map <a-s-N> <Action>(EditorCloneCaretAbove)
"map <c-s-a-n> <Action>(SelectAllOccurrences)

"""""""""""""""""""""""" EASY MOTION MAPPINGS """""""""""""""""""""""""""""
map s <Plug>(easymotion-s)
map <leader>w <Plug>(easymotion-bd-w)

"""""""""""""""""""""""" ReplaceWithRegister """""""""""""""""""""""""""""
nmap cr <Plug>ReplaceWithRegisterOperator
nmap crr <Plug>ReplaceWithRegisterLine
xmap cr <Plug>ReplaceWithRegisterVisual


"""""""""""""""""""""""" Other """""""""""""""""""""""""""""
nmap <C-\> <Action>(ActivateTerminalToolWindow)

"" -- Map IDE actions to IdeaVim -- https://jb.gg/abva4t
"" Map \r to the Reformat Code action
"map  <Action>(ReformatCode)

"" Map <leader>d to start debug
"map <leader>d <Action>(Debug)

"" Map \b to toggle the breakpoint on the current line
"map \b <Action>(ToggleLineBreakpoint)

" In insert or command mode, move by using Ctrl

"""""""""""""""""""""""" INSERT MODE MAPPINGS """""""""""""""""""""""""""""
inoremap <C-h> <Left>
inoremap <C-j> <Down>
inoremap <C-k> <Up>
inoremap <C-l> <Right>
cnoremap <C-h> <Left>
cnoremap <C-j> <Down>
cnoremap <C-k> <Up>
cnoremap <C-l> <Right>

"""""""""""""""""""""""" CUSTOM FUNCTIONS MAPPINGS """""""""""""""""""""""""""""
" Stolen from https://github.com/citizenmatt/dotfiles/blob/master/ideavimrc
function! Invert(calledFromVisual)
  let antonyms = ['true', 'false', 'after', 'before', 'start', 'end', 'left', 'right', 'first', 'last',
                 \'True', 'False', 'After', 'Before', 'Start', 'End', 'Left', 'Right', 'First', 'Last',
                 \'private', 'public']

  if a:calledFromVisual
    normal gv"wy
  else
    normal "wyiw
  endif
  let wordUnderCaret = @w

  let eraseWord = a:calledFromVisual ? 'gvc' : 'ciw'
  let count = 0
  while (count < len(antonyms))
    if (antonyms[count] ==# wordUnderCaret)
      let antonym = (count % 2 ==? 0) ? antonyms[count + 1] : antonyms[count - 1]
      execute 'normal ' .. eraseWord .. antonym
      break
    endif
    let count += 1
  endwhile
endfunction
nnoremap ! :call Invert(0)<CR>
vnoremap ! :<C-u>call Invert(1)<CR>

" Find more examples here: https://jb.gg/share-ideavimrc